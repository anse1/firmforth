* firmforth

firmforth is a just-in-time-compiling forth-like system using [[http://libfirm.org][libfirm]]

** Design

Firmforth is not a real forth because it lacks the typical inner
interpreter.  Its dictionary is just a list of functions that can be
invoked for an effect on a stack of values or a side effect.

It does sport a forth-like outer interpreter though.  In interpreter
mode, it executes the functions for the words that are input.  In
compilation mode, its action depends on whether an entered word is
flagged immediate.  Immediate words - e.g. "if" - are still executed
right-away and implement the compiler itself.  Non-immediate words end
up as Call nodes in the intermediate language.

When the definition is complete, the IR is optimized and compiled into
a shared object and added to the word list using dlopen().  The IR is
kept around for inlining future Calls during the optimization phase.

** Usage

A couple of standard forth words are written in forth itself in the
file =core.fifo=.  To get an interactive session with these words
defined, you could invoke firmforth like this:

: make && cat core.fifo - | ./firmforth

** Goals
- [X] Interactively compile forth words using graphs of Call nodes
- [X] Add control flow primitives
- [X] Keep IR of newly defined words around and inline them
- [X] Keep IR of statically defined words around and inline them


** Benchmark

Time for compiling and executing the word =fibonacci= as defined in
=core.fifo= for the number 35.

|                   | compile [s] | compute [s] |
|-------------------+-------------+-------------|
| firmforth a278bf1 |        0.43 |        0.33 |
| GNU Gforth 0.7.2  |        0.00 |        0.82 |
| stubforth 5745163 |        0.00 |        0.83 |

** Authors

Andreas Seltenreich <seltenreich@gmx.de>
